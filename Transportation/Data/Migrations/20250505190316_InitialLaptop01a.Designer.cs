// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transportation.Data;

#nullable disable

namespace Transportation.Data.Migrations
{
    [DbContext(typeof(blonddachshund))]
    [Migration("20250505190316_InitialLaptop01a")]
    partial class InitialLaptop01a
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Transportation.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Dismissal")
                        .HasColumnType("time");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Return")
                        .HasColumnType("time");

                    b.Property<string>("ReturnDayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("RunId")
                        .HasColumnType("int");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("SubType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RouteId");

                    b.HasIndex("RunId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Transportation.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan?>("AMReport")
                        .HasColumnType("time");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email21Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endorsement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatekeeperNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("PMReport")
                        .HasColumnType("time");

                    b.Property<string>("Phone2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("RunId")
                        .HasColumnType("int");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetDesignator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("RunId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Transportation.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BuiltIns")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityAdult")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityChild")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOT")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DVR")
                        .HasColumnType("bit");

                    b.Property<string>("Designator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Radio")
                        .HasColumnType("int");

                    b.Property<string>("RadioNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replacement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StatusNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Wheelchair")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Transportation.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AmArrive")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AmLeave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AmReport")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardware")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PmReport")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("Supervision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Transportation.Models.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan?>("AmArrive")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("AmStart")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardware")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("PmArrive")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("PmStart")
                        .HasColumnType("time");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Supervision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Run");
                });

            modelBuilder.Entity("Transportation.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Assigned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmmentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Scheduled")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Scheduled1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Transportation.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email21Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatekeeperNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RunId")
                        .HasColumnType("int");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetDesignator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Transportation.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DA1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Driver1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Publc")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Route1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Select")
                        .HasColumnType("bit");

                    b.Property<string>("Staff1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stop1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Transportation.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Transportation.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Transportation.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transportation.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Transportation.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transportation.Models.Calendar", b =>
                {
                    b.HasOne("Transportation.Models.Contact", "Contact")
                        .WithMany("Calendars")
                        .HasForeignKey("ContactId");

                    b.HasOne("Transportation.Models.Route", "Route")
                        .WithMany("Calendars")
                        .HasForeignKey("RouteId");

                    b.HasOne("Transportation.Models.Run", "Run")
                        .WithMany("Calendars")
                        .HasForeignKey("RunId");

                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Calendars")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Contact");

                    b.Navigation("Route");

                    b.Navigation("Run");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Contact", b =>
                {
                    b.HasOne("Transportation.Models.Route", "Route")
                        .WithMany("Contacts")
                        .HasForeignKey("RouteId");

                    b.HasOne("Transportation.Models.Run", "Run")
                        .WithMany("Contacts")
                        .HasForeignKey("RunId");

                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Contacts")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Route");

                    b.Navigation("Run");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Equipment", b =>
                {
                    b.HasOne("Transportation.Models.Route", "Route")
                        .WithMany("Equipments")
                        .HasForeignKey("RouteId");

                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Equipments")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Route");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Route", b =>
                {
                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Routes")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Run", b =>
                {
                    b.HasOne("Transportation.Models.Route", "Route")
                        .WithMany("Runs")
                        .HasForeignKey("RouteId");

                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Runs")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Route");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Service", b =>
                {
                    b.HasOne("Transportation.Models.Equipment", "Equipment")
                        .WithMany("Service")
                        .HasForeignKey("EquipmmentId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Student", b =>
                {
                    b.HasOne("Transportation.Models.Run", "Run")
                        .WithMany("Students")
                        .HasForeignKey("RunId");

                    b.HasOne("Transportation.Models.Ticket", "Ticket")
                        .WithMany("Students")
                        .HasForeignKey("TicketId");

                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Run");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Ticket", b =>
                {
                    b.HasOne("Transportation.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Transportation.Models.Contact", b =>
                {
                    b.Navigation("Calendars");
                });

            modelBuilder.Entity("Transportation.Models.Equipment", b =>
                {
                    b.Navigation("Service");
                });

            modelBuilder.Entity("Transportation.Models.Route", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Contacts");

                    b.Navigation("Equipments");

                    b.Navigation("Runs");
                });

            modelBuilder.Entity("Transportation.Models.Run", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Contacts");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Transportation.Models.Ticket", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("Contacts");

                    b.Navigation("Equipments");

                    b.Navigation("Routes");

                    b.Navigation("Runs");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
